#!/usr/bin/env ruby

require "optparse"

$LOAD_PATH.unshift("#{__dir__}/../lib")

require "rblox/test"

USAGE = "Usage: rblox-test <suites> [filter] [custom interpreter...]"

def main
  test_collection = Rblox::Test::Collection.new

  options = {}
  OptionParser.new do |opts|
    opts.banner = USAGE

    opts.on("-i", "--interpreter INTERPRETER", "Path to interpreter") do |interpreter|
      options[:interpreter] = interpreter
    end

    # TODO: Not quite equivalent to the original
    opts.on("-a", "--arguments x,y,z", Array, "Additional interpreter arguments") do |arguments|
      options[:arguments] = arguments
    end
  end.parse!

  if ARGV.empty?
    usage_error("Missing suite name")
  elsif ARGV.length > 2
    usage_error("Unexpected arguments: #{ASRGV.drop(2).join(" ")}")
  end

  suite_name = ARGV[0]
  filter_path = ARGV[1] if ARGV.length == 2

  if options[:interpreter]
    custom_interpreter = options[:interpreter]
    custom_arguments = []
  end

  if options[:arguments]
    custom_arguments = options[:arguments]

    if custom_interpreter.nil?
      usage_error("Must pass an interpreter path if providing custom arguments")
    end
  end

  if suite_name == "all"
    run_suites(test_collection.all_suites, filter_path, custom_interpreter, custom_arguments)
  elsif suite_name == "c"
    run_suites(test_collection.c_suites, filter_path, custom_interpreter, custom_arguments)
  elsif suite_name == "java"
    run_suites(test_collection.java_suites, filter_path, custom_interpreter, custom_arguments)
  elsif !test_collection.contains_suite?(suite_name)
    puts "Unknown interpreter '#{suite_name}'"
    exit 1
  elsif !run_suite(test_collection.suite(suite_name), filter_path, custom_interpreter, custom_arguments)
    exit 1
  end
end

def usage_error(message)
  puts message
  puts ""
  puts USAGE
  exit 1
end

def run_suites(suites, filter_path, custom_interpreter, custom_arguments)
  any_failed = false
  suites.each do |name, suite|
    puts "=== #{name} ==="
    any_failed = true unless run_suite(suite, filter_path, custom_interpreter, custom_arguments)
    puts ""
  end

  exit(1) if any_failed
end

def run_suite(suite, filter_path, custom_interpreter, custom_arguments)
  suite.run(filter_path, custom_interpreter, custom_arguments)
end

main
